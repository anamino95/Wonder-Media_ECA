#include "stdafx.h"
#include <iostream>
using namespace System;
using namespace std;



ref class ManagedMonster {
public:
ManagedMonster(int HP);
~ManagedMonster();
!ManagedMonster();
void TellHitPoints();
private:
int *m_DynamicHP;
};
ManagedMonster::ManagedMonster(int HP) : m_DynamicHP(new int(HP)) {
cout << "ManagedMonster Constructor" << endl;
}
ManagedMonster::~ManagedMonster() {
cout << "ManagedMonster Destructor" << endl;
this->!ManagedMonster();
}
ManagedMonster::!ManagedMonster() {
cout << "ManagedMonster Finalizer" << endl;
delete m_DynamicHP;
}
void ManagedMonster::TellHitPoints() {
cout << "ManagedMonster has " << *m_DynamicHP << " HP" << endl;
}


int main() {
ManagedMonster ^monster_ref = gcnew ManagedMonster(120);
monster_ref->TellHitPoints();
delete monster_ref; // Call Dispose.
}

______________________________________________________________________________________________________________________________________
// CLRtest.cpp : main project file.

#include "stdafx.h"  //stdafx.h is a header file that contains essential definition information for the methods used in the program,
#include <iostream>
using namespace System;
using namespace std;

namespace MyNamespace
{
	void DoEverything()
	{
		Console::WriteLine(L"Managed Hello World"); // MANAGED
		cout << "Native Hello World" << endl; // NATIVE
	}
}


ref class ManagedMonster  //CHECK THE "ref"
{
public:
	ManagedMonster(int HP) : m_HP(HP) {
		cout << "ManagedMonster Constructor" << endl;
	}
	void TellHitPoints() {
		cout << "ManagedMonster has " << m_HP << " HP" << endl;
	}
private:
	int m_HP;
};

int main()
{
	//Console::WriteLine(L"Managed Hello World");
	//std::cout << "Native Hello World" << std::endl;
	MyNamespace::DoEverything();
	//MANAGED CLASSES
	ManagedMonster ^monster_ref = gcnew ManagedMonster(120);  //reference to a managed object, uses ^ character in C++/CLI
	monster_ref->TellHitPoints(); // Garbage Collector frees allocated object at the end of the program.
	return 0;
}
